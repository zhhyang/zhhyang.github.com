{"componentChunkName":"component---src-templates-blog-post-js","path":"/package-json/","result":{"data":{"site":{"siteMetadata":{"title":"Freeman 的博客"}},"markdownRemark":{"id":"92ecf2c3-5bae-5737-b2d0-a8dd9793cc5c","excerpt":"Name 必须字段 小提示： 不要在name中包含js, node字样； 这个名字最终会是URL的一部分，命令行的参数，目录名，所以不能以点号或下划线开头； 这个名字可能在require()方法中被调用，所以应该尽可能短； Version 必须字段。 Description 可选字段，必须是字符串。npm search…","html":"<h2>Name</h2>\n<blockquote>\n<p>必须字段</p>\n</blockquote>\n<p>小提示：</p>\n<p>不要在name中包含js, node字样；</p>\n<p>这个名字最终会是URL的一部分，命令行的参数，目录名，所以不能以点号或下划线开头；</p>\n<p>这个名字可能在require()方法中被调用，所以应该尽可能短；</p>\n<h2>Version</h2>\n<blockquote>\n<p>必须字段。</p>\n</blockquote>\n<h2>Description</h2>\n<blockquote>\n<p>可选字段，必须是字符串。npm search的时候会用到。</p>\n</blockquote>\n<h2>Keywords</h2>\n<blockquote>\n<p>可选字段，字符串数组。npm search的时候会用到。</p>\n</blockquote>\n<h2>Homepage</h2>\n<blockquote>\n<p>可选字段，没有<a href=\"http://%E7%AD%89%E5%B8%A6%E5%8D%8F%E8%AE%AE%E5%89%8D%E7%BC%80%E7%9A%84URL%E3%80%82\">http://等带协议前缀的URL。</a></p>\n</blockquote>\n<h2>Bugs</h2>\n<blockquote>\n<p>可选字段，问题追踪系统的URL或邮箱地址；npm bugs用的上。</p>\n</blockquote>\n<p>{ “url” :”<a href=\"http://github.com/owner/project/issues%22\">http://github.com/owner/project/issues”</a>,</p>\n<p> “email” :“project@hostname.com”</p>\n<p>}</p>\n<h2>License</h2>\n<blockquote>\n<p>可选字段。</p>\n</blockquote>\n<p>如果是使用一个普遍的license，比如BSD-3-Clause或MIT，直接使用：</p>\n<p>{ “license” : “BSD-3-Clause” }\nAuthor, contributors\n都是可选字段。author是一个人，contributors是一组人。</p>\n<p>Author的格式如下：</p>\n<p>{ “name” : “Barney Rubble”,\n“email” : “b@rubble.com”,\n“url” : ”<a href=\"http://barnyrubble.tumblr.com/\">http://barnyrubble.tumblr.com/</a>”\n}\n这种格式也可以：</p>\n<p>“Barney Rubble <a href=\"mailto:b@rubble.com\">b@rubble.com</a> (<a href=\"http://barnyrubble.tumblr.com/\">http://barnyrubble.tumblr.com/</a>)”</p>\n<h2>Files</h2>\n<blockquote>\n<p>可选字段，项目包含的一组文件。如果是文件夹，文件夹下的文件也会被包含。如果需要把某些文件不包含在项目中，添加一个”.npmignore”文件。这个文件和”gitignore”类似。</p>\n</blockquote>\n<h2>Main</h2>\n<blockquote>\n<p>可选字段。这个字段的值是你程序主入口模块的ID。如果其他用户需要你的包，当用户调用require()方法时，返回的就是这个模块的导出（exports）。</p>\n</blockquote>\n<h2>Bin</h2>\n<blockquote>\n<p>可选字段。很多的包都会有执行文件需要安装到PATH中去。</p>\n</blockquote>\n<p>这个字段对应的是一个Map，每个元素对应一个{ 命令名：文件名 }。</p>\n<p>{ “bin” : { “npm” : “./cli.js” } }\nDirectories</p>\n<blockquote>\n<p>用于指示包的目录结构：</p>\n</blockquote>\n<p>Directories.lib</p>\n<p>指示库文件的位置。</p>\n<p>Directories.bin</p>\n<p>和前面的bin是一样的，但如果前面已经有bin，那么这个就无效。</p>\n<p>除了以上两个，还有Directories.doc&#x26; Directories.man &#x26; Directories.example。</p>\n<h2>Repository</h2>\n<blockquote>\n<p>可选字段。用于指示代码存放的位置。</p>\n</blockquote>\n<p>“repository” :\n{ “type” : “git”\n, “url” : ”<a href=\"http://github.com/npm/npm.git\">http://github.com/npm/npm.git</a>”\n}</p>\n<p>“repository” :\n{ “type” : “svn”\n, “url” : ”<a href=\"http://v8.googlecode.com/svn/trunk/\">http://v8.googlecode.com/svn/trunk/</a>”\n}</p>\n<h2>Scripts</h2>\n<blockquote>\n<p>可选字段，object。Key是生命周期事件名，value是在事件点要跑的命令。参考npm-scripts。</p>\n</blockquote>\n<h2>Config</h2>\n<blockquote>\n<p>可选字段，object。</p>\n</blockquote>\n<p>Config对象中的值在Scripts的整个周期中皆可用，专门用于给Scripts提供配置参数。</p>\n<h2>Dependencies</h2>\n<blockquote>\n<p>可选字段，指示当前包所依赖的其他包。</p>\n</blockquote>\n<p>{ “dependencies” :\n{ “foo” : “1.0.0 - 2.9999.9999”\n, “bar” : ”>=1.0.2 &#x3C;2.1.2”\n, “baz” : “>1.0.2 &#x3C;=2.3.4”\n, “boo” : “2.0.1”\n, “qux” : “&#x3C;1.0.0 || >=2.3.1 &#x3C;2.4.5 || >=2.5.2 &#x3C;3.0.0”\n, “asd” : ”<a href=\"http://asdf.com/asdf.tar.gz\">http://asdf.com/asdf.tar.gz</a>”\n, “til” : “~1.2”\n, “elf” : “~1.2.3”\n, “two” : “2.x”\n, “thr” : “3.3.x”\n}\n}\n版本格式可以是下面任一种：</p>\n<p>version 完全匹配</p>\n<blockquote>\n<p>version 大于这个版本</p>\n</blockquote>\n<blockquote>\n<p>=version大于或等于这个版本</p>\n</blockquote>\n<p>&#x3C;version</p>\n<p>&#x3C;=version</p>\n<p>~version 非常接近这个版本</p>\n<p>^version 与当前版本兼容</p>\n<p>1.2.x X代表任意数字，因此1.2.1, 1.2.3等都可以</p>\n<p><a href=\"http://..\">http://..</a>. Unix系统下使用的tarball的URL。</p>\n<ul>\n<li>任何版本都可以</li>\n</ul>\n<p>\"\"任何版本都可以</p>\n<p>version1 - version2  等价于 >=version1 &#x3C;=version2.</p>\n<p>range1 || range2 满足任意一个即可</p>\n<p>git… Git地址</p>\n<p>user/repo</p>\n<h2>devDependencies</h2>\n<blockquote>\n<p>可选字段。如果只需要下载使用某些模块，而不下载这些模块的测试和文档框架，放在这个下面比较不错。</p>\n</blockquote>\n<h2>peerDependencies</h2>\n<blockquote>\n<p>可选字段。兼容性依赖。如果你的包是插件，适合这种方式。</p>\n</blockquote>\n<h2>bundledDependencies</h2>\n<blockquote>\n<p>可选字段。发布包时同时打包的其他依赖。</p>\n</blockquote>\n<h2>optionalDependencies</h2>\n<blockquote>\n<p>可选字段。如果你想在某些依赖即使没有找到，或则安装失败的情况下，npm都继续执行。那么这些依赖适合放在这里。</p>\n</blockquote>\n<h2>Engines</h2>\n<blockquote>\n<p>可选字段。既可以指定node版本：</p>\n</blockquote>\n<p>{ “engines” : {“node” : ”>=0.10.3 &#x3C;0.12” } }</p>\n<p>也可以指定npm版本：</p>\n<p>{ “engines” : {“npm” : “~1.0.20” } }</p>\n<h2>engineStrick</h2>\n<blockquote>\n<p>可选字段，布尔值。如果你肯定你的程序只能在制定的engine上运行，设置为true。</p>\n</blockquote>\n<h2>Os</h2>\n<blockquote>\n<p>可选字段。指定模块可以在什么操作系统上运行：</p>\n</blockquote>\n<p>“os” : [ “darwin”,“linux” ]</p>\n<p>“os” : [ “!win32” ]</p>\n<p>CPU</p>\n<blockquote>\n<p>可选字段。指定CPU型号。</p>\n</blockquote>\n<p>“cpu” : [ “x64”,“ia32” ]</p>\n<p>“cpu” : [ “!arm”,“!mips” ]</p>\n<h2>preferGlobal</h2>\n<blockquote>\n<p>可选字段，布尔值。如果你的包是个命令行应用程序，需要全局安装，就可以设为true。</p>\n</blockquote>\n<h2>Private</h2>\n<blockquote>\n<p>可选字段，布尔值。如果private为true，npm会拒绝发布。这可以防止私有repositories不小心被发布出去。</p>\n</blockquote>\n<h2>publishConfig</h2>\n<blockquote>\n<p>可选字段。发布时使用的配置值放这。</p>\n</blockquote>\n<p>默认值\n·  “scripts”:{“start”: “node server.js”}</p>\n<p>如果你的包里有server.js文件，npm默认将执行： node server.js.</p>\n<p>·  “scripts”:{“preinstall”:“node-gyp rebuild”}</p>\n<p>如果包里有binding.gyp，npm默认在preinstall命令时，使用node-gyp做编译。</p>","frontmatter":{"title":"package.json 字段全解析","date":"May 06, 2015","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/package-json/","previous":null,"next":{"fields":{"slug":"/eslint-get-started/ESLint的使用/"},"frontmatter":{"title":"ESLint的使用"}}}}}